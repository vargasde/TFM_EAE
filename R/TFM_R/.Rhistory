Denunciante <- distinct(multas, DENUNCIANTE)
# CREACION DE TABLA DENUNCIATES
denunciante <- distinct(multas, DENUNCIANTE)
denunciante$id <- paste('D', 1:nrow(Denunciante), sep = '')
colnames(denunciante) <- c('denunciante','id')
denunciante <- denunciante[c(2,1)]
rm(Denunciante)
View(denunciante)
# CREACION DE TABLA DENUNCIATES
denunciante <- distinct(multas, DENUNCIANTE)
denunciante$id <- paste('D', 1:nrow(denunciante), sep = '')
colnames(denunciante) <- c('denunciante','id')
denunciante <- denunciante[c(2,1)]
View(denunciante)
multas <- merge(multas, denunciante,by.x = "DENUNCIANTE", by.y = "denunciante") # Tarda aprox 11min
View(multas)
multas <- multas[order(FECHA),]
multas <- multas[order(multas$FECHA),]
View(multas)
View(d_multas)
colnames(multas)['id'] <- 'denunciante'
colnames(multas)[15] <- 'denunciante'
multas$id_mul <- paste('m', 1:nrow(multas), sep = '')
View(d_multas)
View(d_multas)
#Convertir DESCUENTO a caracter
class(multas$DESCUENTO)
# CREACION DE TABLA GRAVEDAD
calificacion <- distinct(multas, CALIFICACION)
rm(Calificacion)
View(calificacion)
calificacion$id_cal <- paste('c', 1:nrow(calificacion), sep = '')
colnames(calificacion) <- c('calificacion','id_cal')
calificacion <- calificacion[c(2,1)]
View(calificacion)
multas <- merge(multas, calificacion,by.x = "CALIFICACION", by.y = "calificacion")
View(multas)
multas <- merge(multas, calificacion,by.x = "CALIFICACION", by.y = "calificacion")
View(calificacion)
class(calificacion$calificacion)
multas <- merge(multas, calificacion, by.x = "CALIFICACION", by.y = "calificacion")
rm(det_multas)
rm(detalle_multas)
rm(multas.address)
rm(multas_grave)
rm(my.address)
rm(result)
rm(soria)
rm(vehiculos)
rm(unizar)
multas <- merge(multas, calificacion, by.x = "CALIFICACION", by.y = "calificacion")
rm(d)
colnames(multas)[17] <- 'calificacion'
colnames(multas)[18] <- 'calificacion'
colnames(multas)[17] <- 'calificacion'
# ELIMINAR COLUMNAS ORIGINALES DE CALIF. Y DEMANDANTE
multas[c(1,2)] <- NULL
colnames(multas)
multas <- multas[c(14,12,2,3,1,13,4,5,6,15,7,8,9,10,11)]
colnames(multas)
multas[c(14,15)] <- NULL
colnames(multas)
reasons <- count(multas, multas$HECHO.BOL)
colnames(reasons) <- c("HECHO.BOL", 'count')
colnames(reasons) <- c("Reason", 'count')
c = 1
for (i in 1:nrow(reasons$Reason)) {
if(print(grepl("*ALCOHOL*|*ALCOHOLEMIA*|*EMBRIAGUEZ*|*ALCOHOL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ALCOHOLEMIA'
} else if(print(grepl("*CONTAMINACIÓN*|*GASES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VIOLAR RESTRICCIONES POR CONTAMINACION'
} else if(print(grepl("*ESTACIONAR EN LUGAR PROHIBIDO*|*ESTACIONAR EN ZONA PROHIBIDA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO PROHIBIDO'
} else if(print(grepl("*ESTACIONAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*MEDIDA*|*ABANDONA PUESTO*|*ABANDONO EL PUESTO*|*ABANDONO PUESTO*|
*ABANDONA EL PUESTO*|*ABANDONA EL VHO*|*ABANDONA VHO*|*ABANDONAR EL VHO*|*ABANDONAR VHO*|
*ABANDONAR EL PUESTO*|*ABANDONAR PUESTO*|*ABANDONA COCHE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*SENTIDO CONTRARIO*|*CONTRARIA*|*DIRECCION PROHIBIDA*|*SENTIDO PROHIBIDO*|*DIRECCIÓN PROHIBIDO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CIRCULACION EN SENTIDO CONTRARIO O PROHIBIDO'
} else if(print(grepl("*VELOCIDAD*|*ACELER*|\\bMAS DE\\b|\\bCIRCULA A\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*PRIORIDAD DE PASO*|*PREFERENCIA DE PASO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PRIORIDAD DE PASO'
} else if(print(grepl("*SEMAFORO ROJO*|*SEMAFORO EN ROJO*|*FASE ROJA*|*REBASAR*SEMAFOROS*|*SALTA*SEMAFORO*|*SEMAFORO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ILEGALIDAD EN SEMAFOROS'
} else if(print(grepl("*REBASAR*|*ADELANTAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'REBASAR INDEBIDAMENTE'
} else if(print(grepl("*SEÑAL*|*VIALES*|*CIRCULACIÓN RESERVADA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION'
} else if(print(grepl("*OCUPANTE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE OCUPANTES'
} else if(print(grepl("*PANTALLA*|*TELEFONO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("\\bMOVIL\\b|*OTROS DISPOSITIVOS*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("*NIÑ@*|*MENOR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PELIGRO A MENORES'
} else if(print(grepl("\\bKM\\b|\\bKMH\\b|\\bKMS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*CARGA*|*DESCARGA*|*ANIMALES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CINTUR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CINTURON DE SEGURIDAD'
} else if(print(grepl("*DROGA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'DROGAS'
} else if(print(grepl("\\bCASCO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EQUIPO PROTECTOR'
} else if(print(grepl("*MARCHA ATR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'MARCHA ATRAS'
} else if(print(grepl("*PEATONES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OBSTACULIZACION A PEATONES'
} else if(print(grepl("*ZIG ZAG*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CONDUCCION NEGLIGENTE ZIG ZAG'
} else if(print(grepl("\\bPARAR\\b|\\bPARARSE\\b|\\bALTO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION' #Indicar que esto puede ser porque para donde no debe o porque no para cuando le indican.
} else if(print(grepl("*CAMI?N*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE PESO CAMION'
} else if(print(grepl("\\bPERSONAS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CARRIL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO INDEBIDO DE CARRILES'
} else if(print(grepl("*BICICLETA*|*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS BICICLETAS'
} else if(print(grepl("*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MONOPATINES'
} else if(print(grepl("*MOTOCICLETA*|*CICLOMOTOR", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MOTOCICLETA Y CICLOMOTOR'
} else {
reasons$Motivo[c] <- 'OTROS'
}
c = c + 1
}
for (i in 1:nrow(reasons)) {
if(print(grepl("*ALCOHOL*|*ALCOHOLEMIA*|*EMBRIAGUEZ*|*ALCOHOL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ALCOHOLEMIA'
} else if(print(grepl("*CONTAMINACIÓN*|*GASES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VIOLAR RESTRICCIONES POR CONTAMINACION'
} else if(print(grepl("*ESTACIONAR EN LUGAR PROHIBIDO*|*ESTACIONAR EN ZONA PROHIBIDA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO PROHIBIDO'
} else if(print(grepl("*ESTACIONAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*MEDIDA*|*ABANDONA PUESTO*|*ABANDONO EL PUESTO*|*ABANDONO PUESTO*|
*ABANDONA EL PUESTO*|*ABANDONA EL VHO*|*ABANDONA VHO*|*ABANDONAR EL VHO*|*ABANDONAR VHO*|
*ABANDONAR EL PUESTO*|*ABANDONAR PUESTO*|*ABANDONA COCHE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*SENTIDO CONTRARIO*|*CONTRARIA*|*DIRECCION PROHIBIDA*|*SENTIDO PROHIBIDO*|*DIRECCIÓN PROHIBIDO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CIRCULACION EN SENTIDO CONTRARIO O PROHIBIDO'
} else if(print(grepl("*VELOCIDAD*|*ACELER*|\\bMAS DE\\b|\\bCIRCULA A\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*PRIORIDAD DE PASO*|*PREFERENCIA DE PASO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PRIORIDAD DE PASO'
} else if(print(grepl("*SEMAFORO ROJO*|*SEMAFORO EN ROJO*|*FASE ROJA*|*REBASAR*SEMAFOROS*|*SALTA*SEMAFORO*|*SEMAFORO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ILEGALIDAD EN SEMAFOROS'
} else if(print(grepl("*REBASAR*|*ADELANTAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'REBASAR INDEBIDAMENTE'
} else if(print(grepl("*SEÑAL*|*VIALES*|*CIRCULACIÓN RESERVADA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION'
} else if(print(grepl("*OCUPANTE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE OCUPANTES'
} else if(print(grepl("*PANTALLA*|*TELEFONO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("\\bMOVIL\\b|*OTROS DISPOSITIVOS*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("*NIÑ@*|*MENOR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PELIGRO A MENORES'
} else if(print(grepl("\\bKM\\b|\\bKMH\\b|\\bKMS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*CARGA*|*DESCARGA*|*ANIMALES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CINTUR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CINTURON DE SEGURIDAD'
} else if(print(grepl("*DROGA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'DROGAS'
} else if(print(grepl("\\bCASCO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EQUIPO PROTECTOR'
} else if(print(grepl("*MARCHA ATR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'MARCHA ATRAS'
} else if(print(grepl("*PEATONES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OBSTACULIZACION A PEATONES'
} else if(print(grepl("*ZIG ZAG*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CONDUCCION NEGLIGENTE ZIG ZAG'
} else if(print(grepl("\\bPARAR\\b|\\bPARARSE\\b|\\bALTO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION' #Indicar que esto puede ser porque para donde no debe o porque no para cuando le indican.
} else if(print(grepl("*CAMI?N*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE PESO CAMION'
} else if(print(grepl("\\bPERSONAS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CARRIL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO INDEBIDO DE CARRILES'
} else if(print(grepl("*BICICLETA*|*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS BICICLETAS'
} else if(print(grepl("*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MONOPATINES'
} else if(print(grepl("*MOTOCICLETA*|*CICLOMOTOR", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MOTOCICLETA Y CICLOMOTOR'
} else {
reasons$Motivo[c] <- 'OTROS'
}
c = c + 1
}
View(reasons)
a = 1
for (i in 1:nrow(reasons)) {
if(print(grepl("*MONOPATIN*|\\bPATIN\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MONOPATIN, PATIN O SIMILAR'
} else if(print(grepl("\\bDOS RUEDA\\b|\\bDOS RUEDAS\\b|\\bMOTO\\b|\\bCICLOMOTOR\\b|\\bMOTOCICLETA\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MOTOCICLETA'
} else if(print(grepl("\\bBICI*|*CICLISTA*|*BICICLETA*", reasons$Reason[a]) == TRUE)) {
reasons$TVehiculo_implicado[a] <- 'BICICLETA'
} else {
reasons$TVehiculo_implicado[a] <- 'AUTOMOTOR'
}
a = a + 1
}
for (i in 1:nrow(reasons)) {
if(print(grepl("*MONOPATIN*|\\bPATIN\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MONOPATIN, PATIN O SIMILAR'
} else if(print(grepl("\\bDOS RUEDA\\b|\\bDOS RUEDAS\\b|\\bMOTO\\b|\\bCICLOMOTOR\\b|\\bMOTOCICLETA\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MOTOCICLETA'
} else if(print(grepl("\\bBICI*|*CICLISTA*|*BICICLETA*", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'BICICLETA'
} else {
reasons$Vehiculo_implicado[a] <- 'AUTOMOTOR'
}
a = a + 1
}
View(reasons)
reasons$TVehiculo_implicado <- NULL
View(reasons)
a = 1
for (i in 1:nrow(reasons)) {
if(print(grepl("*MONOPATIN*|\\bPATIN\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MONOPATIN, PATIN O SIMILAR'
} else if(print(grepl("\\bDOS RUEDA\\b|\\bDOS RUEDAS\\b|\\bMOTO\\b|\\bCICLOMOTOR\\b|\\bMOTOCICLETA\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MOTOCICLETA'
} else if(print(grepl("\\bBICI*|*CICLISTA*|*BICICLETA*", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'BICICLETA'
} else {
reasons$Vehiculo_implicado[a] <- 'AUTOMOTOR'
}
a = a + 1
}
View(reasons)
# CREACION DE TABLA DE TIPO DE MULTA
tipo_mul <- count(reasons, reasons$Motivo)
View(tipo_mul)
tipo_mul$id_tip <- paste('t', 1:nrow(tipo_mul), sep = '')
tipo_mul[2] <- NULL
tipo_mul <- tipo_mul[c(2,1)]
colnames(tipo_mul) <- c('id_tipo','tipo_multa')
# CREACION DE TABLA DE VEHICULOS
vehiculos <- count(reasons, reasons$Vehiculo_implicado)
rm(Vehiculos)
rm(Categorias)
View(vehiculos)
vehiculos[2] <- NULL
vehiculos <- vehiculos[c(2,1)]
# CREACION DE TABLA DE VEHICULOS
vehiculos <- count(reasons, reasons$Vehiculo_implicado)
vehiculos$id_veh <- paste('v', 1:nrow(vehiculos), sep = '')
vehiculos[2] <- NULL
vehiculos <- vehiculos[c(2,1)]
colnames(vehiculos) <- c('id_veh','vehiculo')
View(vehiculos)
rm(prueba_adress)
# CREAR TABLA DE RAZONES DE MULTA CON CODIGO PARA HACER MERGE CON EL DETALLE
reasons_cod <- merge(reasons, vehiculos, by.x = "Vehiculo_implicado", by.y = "vehiculo")
View(reasons_cod)
colnames(tipo)
colnames(tipo_mul)
reasons_cod <- merge(reasons_cod, tipo_mul, by.x = "Motivo", by.y = "tipo_multa")
View(reasons_cod)
colnames(reasons)
colnames(reasons_cod)
reasons_cod[c(1,2,4)] <- NULL
colnames(reasons_cod)
save.image("C:/Users/Diego/OneDrive/Documents/Maestría/Clases/TFM/GitHub/TFM_EAE/R/TFM_R/TFM_R.Rproj.RData")
# d_multas <- multas
head(multas)
View(multas)
setwd("C:/Users/Diego/OneDrive/Documents/Maestría/Clases/TFM/GitHub/TFM_EAE/Datos/Consolidado")
multas <- read.csv('MultasMAD.csv', sep = ',', header = T, row.names = 'X')
View(multas)
c = 1
for (i in 1:nrow(reasons)) {
if(print(grepl("*ALCOHOL*|*ALCOHOLEMIA*|*EMBRIAGUEZ*|*ALCOHOL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ALCOHOLEMIA'
} else if(print(grepl("*CONTAMINACIÓN*|*GASES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VIOLAR RESTRICCIONES POR CONTAMINACION'
} else if(print(grepl("*ESTACIONAR EN LUGAR PROHIBIDO*|*ESTACIONAR EN ZONA PROHIBIDA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO PROHIBIDO'
} else if(print(grepl("*ESTACIONAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*MEDIDA*|*ABANDONA PUESTO*|*ABANDONO EL PUESTO*|*ABANDONO PUESTO*|
*ABANDONA EL PUESTO*|*ABANDONA EL VHO*|*ABANDONA VHO*|*ABANDONAR EL VHO*|*ABANDONAR VHO*|
*ABANDONAR EL PUESTO*|*ABANDONAR PUESTO*|*ABANDONA COCHE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*SENTIDO CONTRARIO*|*CONTRARIA*|*DIRECCION PROHIBIDA*|*SENTIDO PROHIBIDO*|*DIRECCIÓN PROHIBIDO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CIRCULACION EN SENTIDO CONTRARIO O PROHIBIDO'
} else if(print(grepl("*VELOCIDAD*|*ACELER*|\\bMAS DE\\b|\\bCIRCULA A\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*PRIORIDAD DE PASO*|*PREFERENCIA DE PASO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PRIORIDAD DE PASO'
} else if(print(grepl("*SEMAFORO ROJO*|*SEMAFORO EN ROJO*|*FASE ROJA*|*REBASAR*SEMAFOROS*|*SALTA*SEMAFORO*|*SEMAFORO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ILEGALIDAD EN SEMAFOROS'
} else if(print(grepl("*REBASAR*|*ADELANTAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'REBASAR INDEBIDAMENTE'
} else if(print(grepl("*SEÑAL*|*VIALES*|*CIRCULACIÓN RESERVADA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION'
} else if(print(grepl("*OCUPANTE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE OCUPANTES'
} else if(print(grepl("*PANTALLA*|*TELEFONO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("\\bMOVIL\\b|*OTROS DISPOSITIVOS*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("*NIÑ@*|*MENOR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PELIGRO A MENORES'
} else if(print(grepl("\\bKM\\b|\\bKMH\\b|\\bKMS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*CARGA*|*DESCARGA*|*ANIMALES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CINTUR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CINTURON DE SEGURIDAD'
} else if(print(grepl("*DROGA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'DROGAS'
} else if(print(grepl("\\bCASCO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EQUIPO PROTECTOR'
} else if(print(grepl("*MARCHA ATR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'MARCHA ATRAS'
} else if(print(grepl("*PEATONES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OBSTACULIZACION A PEATONES'
} else if(print(grepl("*ZIG ZAG*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CONDUCCION NEGLIGENTE ZIG ZAG'
} else if(print(grepl("\\bPARAR\\b|\\bPARARSE\\b|\\bALTO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION' #Indicar que esto puede ser porque para donde no debe o porque no para cuando le indican.
} else if(print(grepl("*CAMI?N*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE PESO CAMION'
} else if(print(grepl("\\bPERSONAS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CARRIL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO INDEBIDO DE CARRILES'
} else if(print(grepl("*BICICLETA*|*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS BICICLETAS'
} else if(print(grepl("*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MONOPATINES'
} else if(print(grepl("*MOTOCICLETA*|*CICLOMOTOR", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MOTOCICLETA Y CICLOMOTOR'
} else {
reasons$Motivo[c] <- 'OTROS'
}
c = c + 1
}
reasons <- count(multas, multas$HECHO.BOL)
library(data.table)
library(dplyr)
library(ggmap)
library(ggplot2)
reasons <- count(multas, multas$HECHO.BOL)
colnames(reasons) <- c("Reason", 'count')
c = 1
for (i in 1:nrow(reasons)) {
if(print(grepl("*ALCOHOL*|*ALCOHOLEMIA*|*EMBRIAGUEZ*|*ALCOHOL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ALCOHOLEMIA'
} else if(print(grepl("*CONTAMINACIÓN*|*GASES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VIOLAR RESTRICCIONES POR CONTAMINACION'
} else if(print(grepl("*ESTACIONAR EN LUGAR PROHIBIDO*|*ESTACIONAR EN ZONA PROHIBIDA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO PROHIBIDO'
} else if(print(grepl("*ESTACIONAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*MEDIDA*|*ABANDONA PUESTO*|*ABANDONO EL PUESTO*|*ABANDONO PUESTO*|
*ABANDONA EL PUESTO*|*ABANDONA EL VHO*|*ABANDONA VHO*|*ABANDONAR EL VHO*|*ABANDONAR VHO*|
*ABANDONAR EL PUESTO*|*ABANDONAR PUESTO*|*ABANDONA COCHE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*SENTIDO CONTRARIO*|*CONTRARIA*|*DIRECCION PROHIBIDA*|*SENTIDO PROHIBIDO*|*DIRECCIÓN PROHIBIDO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CIRCULACION EN SENTIDO CONTRARIO O PROHIBIDO'
} else if(print(grepl("*VELOCIDAD*|*ACELER*|\\bMAS DE\\b|\\bCIRCULA A\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*PRIORIDAD DE PASO*|*PREFERENCIA DE PASO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PRIORIDAD DE PASO'
} else if(print(grepl("*SEMAFORO ROJO*|*SEMAFORO EN ROJO*|*FASE ROJA*|*REBASAR*SEMAFOROS*|*SALTA*SEMAFORO*|*SEMAFORO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'ILEGALIDAD EN SEMAFOROS'
} else if(print(grepl("*REBASAR*|*ADELANTAR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'REBASAR INDEBIDAMENTE'
} else if(print(grepl("*SEÑAL*|*VIALES*|*CIRCULACIÓN RESERVADA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION'
} else if(print(grepl("*OCUPANTE*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE OCUPANTES'
} else if(print(grepl("*PANTALLA*|*TELEFONO*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("\\bMOVIL\\b|*OTROS DISPOSITIVOS*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("*NIÑ@*|*MENOR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'PELIGRO A MENORES'
} else if(print(grepl("\\bKM\\b|\\bKMH\\b|\\bKMS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*CARGA*|*DESCARGA*|*ANIMALES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CINTUR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CINTURON DE SEGURIDAD'
} else if(print(grepl("*DROGA*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'DROGAS'
} else if(print(grepl("\\bCASCO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EQUIPO PROTECTOR'
} else if(print(grepl("*MARCHA ATR*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'MARCHA ATRAS'
} else if(print(grepl("*PEATONES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OBSTACULIZACION A PEATONES'
} else if(print(grepl("*ZIG ZAG*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'CONDUCCION NEGLIGENTE ZIG ZAG'
} else if(print(grepl("\\bPARAR\\b|\\bPARARSE\\b|\\bALTO\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION' #Indicar que esto puede ser porque para donde no debe o porque no para cuando le indican.
} else if(print(grepl("*CAMI?N*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'EXCESO DE PESO CAMION'
} else if(print(grepl("\\bPERSONAS\\b", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CARRIL*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'USO INDEBIDO DE CARRILES'
} else if(print(grepl("*BICICLETA*|*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS BICICLETAS'
} else if(print(grepl("*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MONOPATINES'
} else if(print(grepl("*MOTOCICLETA*|*CICLOMOTOR", reasons$Reason[c]) == TRUE)) {
reasons$Motivo[c] <- 'OTROS MOTOCICLETA Y CICLOMOTOR'
} else {
reasons$Motivo[c] <- 'OTROS'
}
c = c + 1
}
a = 1
for (i in 1:nrow(reasons)) {
if(print(grepl("*MONOPATIN*|\\bPATIN\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MONOPATIN, PATIN O SIMILAR'
} else if(print(grepl("\\bDOS RUEDA\\b|\\bDOS RUEDAS\\b|\\bMOTO\\b|\\bCICLOMOTOR\\b|\\bMOTOCICLETA\\b", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'MOTOCICLETA'
} else if(print(grepl("\\bBICI*|*CICLISTA*|*BICICLETA*", reasons$Reason[a]) == TRUE)) {
reasons$Vehiculo_implicado[a] <- 'BICICLETA'
} else {
reasons$Vehiculo_implicado[a] <- 'AUTOMOTOR'
}
a = a + 1
}
# HACER MERGE CON EL DETALLE
colnames(reasons)[1] <- 'HECHO.BOL'
View(reasons)
reasons$count <- NULL
multas <- merge(multas,reasons, by.x = "HECHO.BOL", by.y = "HECHO.BOL") # Tarda aprox 11min
colnames(multas)[c(15,16)] <- c('VEHICULO', 'CATEGORIA') # VERIFICAR ESTO ANTES DE MANDARLO!
setwd("C:/Users/Diego/OneDrive/Documents/Maestría/Clases/TFM/GitHub/TFM_EAE/R/TFM_R")
mapcodes <- read.csv('geocodegrave.csv', sep = ',', header = T, row.names = 'X')
mapcodes <- read.csv('geocodegrave.csv', sep = ',', header = T)
View(mapcodes)
multas <- dplyr::left_join(multas, mapcodes, by = "LUGAR")
#Cambio a character a LUGAR
class(multas$LUGAR)
d_multas$LUGAR = as.character(d_multas$LUGAR)
#Cambio a character a LUGAR
class(multas$LUGAR)
multas$LUGAR = as.character(multas$LUGAR)
class(mapcodes$LUGAR)
class(mapcodes$LUGAR)
mapcodes$LUGAR = as.character(mapcodes$LUGAR)
multas <- dplyr::left_join(multas, mapcodes, by = "LUGAR")
multas$lon.x <- NULL
multas$lon.y <- NULL
multas$ lat.x <- NULL
multas$lat.y <- NULL
multas <- dplyr::left_join(multas, mapcodes, by = "LUGAR")
colnames(multas)
summary(multas$CALIFICACION)
summary(multas)
levels(multas$CALIFICACION)
grave <- multas %>%
filter(CALIFICACION == 'GRAVE',
CALIFICACION == 'GRAVE     ')
View(grave)
rm(grave)
View(multas)
write.csv(multas, 'MultasMAD_Python.csv', row.names=FALSE)
dplyr::sample_n(multas, 500000, replace = TRUE)
multas_sample <- dplyr::sample_n(multas, 500000, replace = TRUE)
write.csv(multas_sample, 'SampleMultasPython.csv', row.names = FALSE)
multas <- read.csv('MultasMAD.csv', sep = ',', header = T, row.names = 'X')
setwd("C:/Users/Diego/OneDrive/Documents/Maestría/Clases/TFM/GitHub/TFM_EAE/Datos/Consolidado")
multas <- read.csv('MultasMAD.csv', sep = ',', header = T, row.names = 'X')
# CAMBIO DE NOMBRE DE MES A NUMERO
multas$MES = as.character(multas$MES)
multas$MES <- gsub('ENERO', '1', multas$MES)
multas$MES <- gsub('FEBRERO', '2', multas$MES)
multas$MES <- gsub('SEPTIEMBRE', '9', multas$MES)
multas$MES <- gsub('NOVIEMBRE', '11', multas$MES)
multas$MES <- gsub('DICIEMBRE', '12', multas$MES)
multas$MES <- gsub('OCTUBRE', '10', multas$MES)
multas$MES <- gsub('SEPTIEMBRE', '9', multas$MES)
multas$MES = as.integer(multas$MES)
multas$HORA = as.character.numeric_version(multas$HORA)
multas$HORA <- chartr(".", ":", multas$HORA)
head(multas$HORA)
# UNIR FECHA Y HORA COMO CHARACTER
multas$FECHA <- paste(multas$ANIO, multas$MES, 01, sep = '-')
multas$FECHA <- paste(multas$FECHA, multas$HORA, sep = ' ')
head(multas$FECHA)
# Convierte a DATETIME
multas$FECHA <- as.POSIXct(multas$FECHA)
multas <- read.csv('MultasMAD.csv', sep = ',', header = T, row.names = 'X')
#Cambio a character a LUGAR
class(multas$LUGAR)
multas$LUGAR = as.character(multas$LUGAR)
multas <- dplyr::left_join(multas, mapcodes, by = "LUGAR")
View(multas)
write.csv(multas, 'MultasMAD.csv', row.names=FALSE)
