library(data.table)
library(dplyr)
library(ggmap)
library(ggplot2)

multas <- read.csv('MultasMAD.csv', sep = ',', header = T, row.names = 'X')

# CAMBIO DE NOMBRE DE MES A NUMERO
multas$MES = as.character(multas$MES)
multas$MES <- gsub('ENERO', '1', multas$MES)
multas$MES <- gsub('FEBRERO', '2', multas$MES)
multas$MES <- gsub('SEPTIEMBRE', '9', multas$MES)
multas$MES <- gsub('NOVIEMBRE', '11', multas$MES)
multas$MES <- gsub('DICIEMBRE', '12', multas$MES)
multas$MES <- gsub('OCTUBRE', '10', multas$MES)
multas$MES <- gsub('SEPTIEMBRE', '9', multas$MES)
multas$MES = as.integer(multas$MES)

# MODIFICAR HORA

multas$HORA = as.character.numeric_version(multas$HORA)
multas$HORA <- chartr(".", ":", multas$HORA)
head(multas$HORA)

# UNIR FECHA Y HORA COMO CHARACTER
multas$FECHA <- paste(multas$ANIO, multas$MES, 01, sep = '-') 
multas$FECHA <- paste(multas$FECHA, multas$HORA, sep = ' ')
head(multas$FECHA)

# Convierte a DATETIME
multas$FECHA <- as.POSIXct(multas$FECHA)
class(multas$FECHA)
multas$HORA <- NULL

#Arreglar la CALIFICACION PARA QUE SOLO SEAN 3 CATEGORIAS: LEVE, GRAVE Y MUY GRAVE
levels(multas$CALIFICACION)
levels(multas$CALIFICACION)[levels(multas$CALIFICACION)=="GRAVE     "] <- "GRAVE"
levels(multas$CALIFICACION)[levels(multas$CALIFICACION)=="LEVE      "] <- "LEVE"
levels(multas$CALIFICACION)[levels(multas$CALIFICACION)=="MUY GRAVE "] <- "MUY GRAVE"
multas$CALIFICACION = as.character(multas$CALIFICACION)
class(multas$CALIFICACION)

#Cambio a character a LUGAR
class(multas$LUGAR)
multas$LUGAR = as.character(multas$LUGAR)

# Convertir DESCUENTO a caracter
class(multas$DESCUENTO)
multas$DESCUENTO = as.character(multas$DESCUENTO)

# ARREGLAR NOMBRES DE DENUNCIANTES
class(multas$DENUNCIANTE)
levels(multas$DENUNCIANTE)
levels(multas$DENUNCIANTE)[levels(multas$DENUNCIANTE)=="SER                 "] <- 'SER'
levels(multas$DENUNCIANTE)[levels(multas$DENUNCIANTE)=="POLICIA MUNICIPAL   "] <- 'POLICIA MUNICIPAL'
levels(multas$DENUNCIANTE)[levels(multas$DENUNCIANTE)=="SACE                "] <- 'SACE'
multas$DENUNCIANTE = as.character(multas$DENUNCIANTE)

#--------------------------------------------------------------------------------------------------------------------------------

# CLASIFICACION DE MULTAS

reasons <- count(multas, multas$HECHO.BOL)
colnames(reasons) <- c("Reason", 'count')

c = 1
for (i in 1:nrow(reasons)) {
  if(print(grepl("*ALCOHOL*|*ALCOHOLEMIA*|*EMBRIAGUEZ*|*ALCOHOL*", reasons$Reason[c]) == TRUE)) {
    reasons$Motivo[c] <- 'ALCOHOLEMIA'
  } else if(print(grepl("*CONTAMINACIÓN*|*GASES*", reasons$Reason[c]) == TRUE)) {
    reasons$Motivo[c] <- 'VIOLAR RESTRICCIONES POR CONTAMINACION'
  } else if(print(grepl("*ESTACIONAR EN LUGAR PROHIBIDO*|*ESTACIONAR EN ZONA PROHIBIDA*", reasons$Reason[c]) == TRUE)) {
    reasons$Motivo[c] <- 'ESTACIONAMIENTO PROHIBIDO'
  } else if(print(grepl("*ESTACIONAR*", reasons$Reason[c]) == TRUE)) {
    reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
  } else if(print(grepl("*MEDIDA*|*ABANDONA PUESTO*|*ABANDONO EL PUESTO*|*ABANDONO PUESTO*|
                        *ABANDONA EL PUESTO*|*ABANDONA EL VHO*|*ABANDONA VHO*|*ABANDONAR EL VHO*|*ABANDONAR VHO*|
                        *ABANDONAR EL PUESTO*|*ABANDONAR PUESTO*|*ABANDONA COCHE*", reasons$Reason[c]) == TRUE)) {
    reasons$Motivo[c] <- 'ESTACIONAMIENTO NEGLIGENTE'
} else if(print(grepl("*SENTIDO CONTRARIO*|*CONTRARIA*|*DIRECCION PROHIBIDA*|*SENTIDO PROHIBIDO*|*DIRECCIÓN PROHIBIDO*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'CIRCULACION EN SENTIDO CONTRARIO O PROHIBIDO'
} else if(print(grepl("*VELOCIDAD*|*ACELER*|\\bMAS DE\\b|\\bCIRCULA A\\b", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*PRIORIDAD DE PASO*|*PREFERENCIA DE PASO*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'PRIORIDAD DE PASO' 
} else if(print(grepl("*SEMAFORO ROJO*|*SEMAFORO EN ROJO*|*FASE ROJA*|*REBASAR*SEMAFOROS*|*SALTA*SEMAFORO*|*SEMAFORO*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'ILEGALIDAD EN SEMAFOROS'
} else if(print(grepl("*REBASAR*|*ADELANTAR*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'REBASAR INDEBIDAMENTE'
} else if(print(grepl("*SEÑAL*|*VIALES*|*CIRCULACIÓN RESERVADA*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION'
} else if(print(grepl("*OCUPANTE*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'EXCESO DE OCUPANTES'
} else if(print(grepl("*PANTALLA*|*TELEFONO*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("\\bMOVIL\\b|*OTROS DISPOSITIVOS*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'USO DE DISPOSITIVO ELECTRONICO'
} else if(print(grepl("*NIÑ@*|*MENOR*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'PELIGRO A MENORES'
} else if(print(grepl("\\bKM\\b|\\bKMH\\b|\\bKMS\\b", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'VELOCIDAD O ACELERACION INDEBIDA'
} else if(print(grepl("*CARGA*|*DESCARGA*|*ANIMALES*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CINTUR*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'CINTURON DE SEGURIDAD'
} else if(print(grepl("*DROGA*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'DROGAS'
} else if(print(grepl("\\bCASCO\\b", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'EQUIPO PROTECTOR'
} else if(print(grepl("*MARCHA ATR*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'MARCHA ATRAS'
} else if(print(grepl("*PEATONES*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OBSTACULIZACION A PEATONES'
} else if(print(grepl("*ZIG ZAG*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'CONDUCCION NEGLIGENTE ZIG ZAG'
} else if(print(grepl("\\bPARAR\\b|\\bPARARSE\\b|\\bALTO\\b", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OMISION DE SENALIZACION VIAL O DE CONDUCCION' #Indicar que esto puede ser porque para donde no debe o porque no para cuando le indican.
} else if(print(grepl("*CAMI?N*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'EXCESO DE PESO CAMION'
} else if(print(grepl("\\bPERSONAS\\b", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'TRANSPORTE DE PASAJEROS, OBJETOS O ANIMALES'
} else if(print(grepl("*CARRIL*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'USO INDEBIDO DE CARRILES'
} else if(print(grepl("*BICICLETA*|*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OTROS BICICLETAS'
} else if(print(grepl("*MONOPATINES*", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OTROS MONOPATINES'
} else if(print(grepl("*MOTOCICLETA*|*CICLOMOTOR", reasons$Reason[c]) == TRUE)) {
  reasons$Motivo[c] <- 'OTROS MOTOCICLETA Y CICLOMOTOR'
} else {
  reasons$Motivo[c] <- 'OTROS'
}
  c = c + 1
}

# TIPO DE VEHICULO AL QUE SE LE APLICA LA MULTA

a = 1
for (i in 1:nrow(reasons)) {
  if(print(grepl("*MONOPATIN*|\\bPATIN\\b", reasons$Reason[a]) == TRUE)) {
    reasons$Vehiculo_implicado[a] <- 'MONOPATIN, PATIN O SIMILAR'
  } else if(print(grepl("\\bDOS RUEDA\\b|\\bDOS RUEDAS\\b|\\bMOTO\\b|\\bCICLOMOTOR\\b|\\bMOTOCICLETA\\b", reasons$Reason[a]) == TRUE)) {
    reasons$Vehiculo_implicado[a] <- 'MOTOCICLETA'
  } else if(print(grepl("\\bBICI*|*CICLISTA*|*BICICLETA*", reasons$Reason[a]) == TRUE)) {
    reasons$Vehiculo_implicado[a] <- 'BICICLETA'
  } else {
    reasons$Vehiculo_implicado[a] <- 'AUTOMOTOR'
  }
  a = a + 1
}

# HACER MERGE CON EL DETALLE
colnames(reasons)[1] <- 'HECHO.BOL'
reasons$count <- NULL
multas <- merge(multas,reasons, by.x = "HECHO.BOL", by.y = "HECHO.BOL") # Tarda aprox 11min
colnames(multas)[c(15,16)] <- c('VEHICULO', 'CATEGORIA') # VERIFICAR ESTO ANTES DE MANDARLO!

#----------------------------------------------------------------------------------------------------------------

MAPAS

multas <- multas
multas2 <- multas %>%
  filter(calificacion == 'c3') %>%
  arrange(FECHA)

address <- distinct(multas2, LUGAR)
colnames(address) <- c("direccion", 'count')

library(devtools)
library(caRtociudad)
install_github("rOpenSpain/caRtociudad", force = T)

# using full address
my.address <- caRtociudad::cartociudad_geocode("plaza de cascorro 11, 28005 madrid")
caRtociudad::cartociudad_geocode()
print(my.address)

address$direcc <- paste(address$direccion, ', MADRID', sep = '')
address$direcc[69]

res <- sapply(address$direcc[1:], caRtociudad::cartociudad_geocode) 
?sapply
res
Si todo funciona bien (puede haber errores por el camino, puede que no se encuentre alguna dirección, etc.) 
tendrás una lista de dfs con una geolocalización por entrada. 
Si haces 

library(plyr) 
ldply(res, function(x) data.frame(long = x[1,12], lat = x[1,13])) 

1tendrás un dataframe con el mismo número de filas que el original con la latitud y longitud correspondiente a 
las direcciones en cuestión. Le puedes pegar luego esas filas al df original.

library(ggmap)
library(ggplot2)
library(ggmap)
register_google('AIzaSyBiZ83peM_TO8AczB7cpjKyV0NsRv851ec')

unizar <- geocode('Calle de Pedro Cerbuna 12, Zaragoza, España', 
                  source = "google")

mapita <- caRtociudad::cartociudad_get_map(c(my.address$lng, my.address$lat), 1)

?caRtociudad::cartociudad_get_map

map.unizar <- get_map(location = c(my.address$lng, my.address$lat),
                      color = "color",
                      maptype = "roadmap",
                      scale = 2,
                      zoom = 16)

ggmap::ggmap(mapita)

soria <- caRtociudad::cartociudad_geocode(address[1:40,1])

soria_map <- caRtociudad::cartociudad_get_map(c(soria$lat, soria$lng), 1)
ggmap::ggmap(soria_map)

# BUSCAR NAs
length(which(is.na(det_multas[17])==T))

colnames(multas)

#-------------------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------
# ORDENAR DATA FRAME Y ASIGNAR PK A CADA MULTA
multas <- multas[order(multas$FECHA),]
multas$id_mul <- paste('m', 1:nrow(multas), sep = '')
#----------------------------------------------------------------------------------
